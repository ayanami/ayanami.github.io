<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Objective-c | NO プログラム NO LIFE]]></title>
  <link href="http://ayanami.github.io/blog/categories/objective-c/atom.xml" rel="self"/>
  <link href="http://ayanami.github.io/"/>
  <updated>2014-06-28T04:11:15+09:00</updated>
  <id>http://ayanami.github.io/</id>
  <author>
    <name><![CDATA[Yoshimasa.Suzuki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Objective-C]UIControlのイベントハンドラに引数を渡す]]></title>
    <link href="http://ayanami.github.io/blog/objective-c/uicontrol-event-callback/"/>
    <updated>2014-04-26T01:40:31+09:00</updated>
    <id>http://ayanami.github.io/blog/objective-c/uicontrol-event-callback</id>
    <content type="html"><![CDATA[<p>Cocoaの<code>[UIControl addTarget:action:forControlEvents:]</code>では<code>action</code>に設定するセレクタに引数を渡すことができないので、
<code>category</code>と<code>blocks</code>を利用して、自由に定義したコールバックを渡せるようにする。</p>

<p>ファイル名は<code>UIControl+Blocks</code>とする。まずはヘッダファイルを定義。
```</p>

<h1>import &lt;UIKit/UIKit.h></h1>

<p>@interface UIControl(Blocks)
&ndash; (void)addTargetWithBlocks:(void (^)())blocks forControlEvents:(UIControlEvents)forControlEvents;
@end
```</p>

<p>次に実装ファイルを定義。<code>category</code>内ではインスタンス変数を保持できないので、関連参照を用いて<code>blocks</code>をストアする。
```</p>

<h1>import &ldquo;UIControl+Blocks.h&rdquo;</h1>

<h1>import &lt;objc/runtime.h></h1>

<p>@implementation UIControl(Blocks)
&ndash; (void)addTargetWithBlocks:(void (^)())blocks forControlEvents:(UIControlEvents)forControlEvents {</p>

<pre><code>objc_setAssociatedObject(self, @"key", blocks, OBJC_ASSOCIATION_COPY);
[self addTarget:self action:@selector(callback:) forControlEvents:forControlEvents];
</code></pre>

<p>}
&ndash; (void)callback:(id)sender {</p>

<pre><code>void (^blocks)() = objc_getAssociatedObject(self, @"key");
if (blocks) {
    blocks();
}
</code></pre>

<p>}
@end
```</p>

<p>後は、任意のクラスでヘッダファイルをインポートすれば、<code>[UIControl addTargetWithBlocks:forControlEvents:]</code>が利用できる。
```
[btn addTargetWithBlocks:^{</p>

<pre><code>NSLog(@"%@", @"hoge");
</code></pre>

<p>} forControlEvents:UIControlEventTouchUpInside];
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Objective-C]配列ソート]]></title>
    <link href="http://ayanami.github.io/blog/objective-c/array-sort-objc/"/>
    <updated>2014-04-07T18:57:32+09:00</updated>
    <id>http://ayanami.github.io/blog/objective-c/array-sort-objc</id>
    <content type="html"><![CDATA[<p>要素が<code>NSString</code>である<code>NSArray</code>のソート方法。
<code>
[array sortedArrayUsingSelector:@selector(compare:)];
</code></p>

<p>要素が以下の様なプロパティを持つオブジェクトである<code>NSArray</code>のソート方法。
<code>
@property (nonatomic) NSUInteger hoge;
@property (nonatomic) NSString *fuga;
</code></p>

<p><code>fuga</code>の昇順でソート。
<code>
NSSortDescriptor *desc = [NSSortDescriptor sortDescriptorWithKey:@"fuga" ascending:YES];
[array sortedArrayUsingDescriptors:[NSArray arrayWithObject:desc]];
</code></p>

<p>ちなみに、Javaでは<a href="http://ayanami.github.io/blog/java/array-sort-java/">こんな感じ</a>。</p>

<p>Objective-Cの方が楽だなー。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Objective-C]数値判定]]></title>
    <link href="http://ayanami.github.io/blog/objective-c/is-numeric-objc/"/>
    <updated>2014-03-28T20:42:38+09:00</updated>
    <id>http://ayanami.github.io/blog/objective-c/is-numeric-objc</id>
    <content type="html"><![CDATA[<p>Objective-Cでの数値判定方法はいくつかあるみたいだけど、<code>NSCharacterSet</code>を利用した方法が一番しっくりきた。
<code>@"0123456789"</code>が、引数のスーパーセットかを判定した結果を返す。
```
+ (BOOL)isNumeric:(NSString *)text {</p>

<pre><code>NSCharacterSet *numbers = [NSCharacterSet characterSetWithCharactersInString:@"0123456789"];
NSCharacterSet *target = [NSCharacterSet characterSetWithCharactersInString:text];
return [numbers isSupersetOfSet:target];
</code></pre>

<p>}
```</p>

<p>ちなみに、Javaでは<a href="http://ayanami.github.io/blog/java/is-numeric-java/">こんな感じ</a>。</p>

<p>Objective-Cは好きだけど、Javaと比べるとメソッド名が長い。。。</p>
]]></content>
  </entry>
  
</feed>
