<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[NO プログラム NO LIFE]]></title>
  <link href="http://ayanami.github.io/atom.xml" rel="self"/>
  <link href="http://ayanami.github.io/"/>
  <updated>2014-06-28T04:34:20+09:00</updated>
  <id>http://ayanami.github.io/</id>
  <author>
    <name><![CDATA[Yoshimasa.Suzuki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Java]Struts2でValidatorをModelで定義する]]></title>
    <link href="http://ayanami.github.io/blog/java/define-validator-in-model-struts2/"/>
    <updated>2014-06-28T04:16:20+09:00</updated>
    <id>http://ayanami.github.io/blog/java/define-validator-in-model-struts2</id>
    <content type="html"><![CDATA[<p><code>Struts2</code>で<code>Action</code>ではなく、<code>Model</code>でValidatorを定義する方法。</p>

<p>まずは<code>Action</code>。
<code>com.opensymphony.xwork2.validator.annotations.VisitorFieldValidator</code>アノテーションを利用する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>private HogeDto hogeDto;
</span><span class='line'>
</span><span class='line'>@VisitorFieldValidator
</span><span class='line'>public void setHogeDto(HogeDto hogeDto) {
</span><span class='line'>    this.hogeDto = hogeDto;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>続いて、<code>Model</code>。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>private String foo;
</span><span class='line'>
</span><span class='line'>public String getFoo() {
</span><span class='line'>    return this.foo;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>@RequiredFieldValidator(key = "errors.required", messageParams = { "getText('foo')" })
</span><span class='line'>public void setFoo(String foo) {
</span><span class='line'>    this.foo = foo;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><code>message.properties</code>。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>errors.required={0}は入力必須です。</span></code></pre></td></tr></table></div></figure>


<p>最後に<code>View</code>。<code>name</code>属性を<code>オブジェクト.プロパティ</code>の形式で定義する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;s:textfield name="hogeDto.foo" /&gt;</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Java]Struts2 + Velocityで呼び出すメソッドを指定する]]></title>
    <link href="http://ayanami.github.io/blog/java/define-target-method-by-velocity/"/>
    <updated>2014-06-28T03:59:14+09:00</updated>
    <id>http://ayanami.github.io/blog/java/define-target-method-by-velocity</id>
    <content type="html"><![CDATA[<p><code>Velocity</code>テンプレートエンジンで、<code>Struts2</code>のActionメソッドを指定する方法。</p>

<p><code>name</code>属性を<code>method:メソッド名</code>の形式で定義する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;input type="submit" name="method:add"　value="hoge"&gt;</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[PHP]Yii + Ajaxで部分テンプレートを表示する]]></title>
    <link href="http://ayanami.github.io/blog/php/render-partial-yii/"/>
    <updated>2014-06-17T02:33:18+09:00</updated>
    <id>http://ayanami.github.io/blog/php/render-partial-yii</id>
    <content type="html"><![CDATA[<p><code>Yii</code>フレームワークを利用して、部分テンプレートを実装する方法。<code>foo</code>を<code>bar</code>に書き換えてみる。</p>

<p>まずはベースとなる<code>base.tpl</code>。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;script type="text/javascript" src="{Yii::app()-&gt;request-&gt;baseUrl}/js/ajax.js"&gt;&lt;/script&gt;
</span><span class='line'>&lt;div id="button"&gt;fooをbarに書き換える&lt;/div&gt;
</span><span class='line'>&lt;div id="replace-area"&gt;foo&lt;/div&gt;</span></code></pre></td></tr></table></div></figure>


<p>続いて、テンプレートとなる<code>part.tpl</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;input id="base-url" type="hidden" value={$baseUrl}&gt;
</span><span class='line'>bar</span></code></pre></td></tr></table></div></figure>


<p>テンプレートをレンダリングする<code>ajax_content.php</code>。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php echo $data; ?&gt;</span></code></pre></td></tr></table></div></figure>


<p><code>base.tpl</code>で読み込んでいる<code>ajax.js</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$(document).ready(function() {'use strict';
</span><span class='line'>
</span><span class='line'>    $(document).on('click', '#button', function() {
</span><span class='line'>        toBar();
</span><span class='line'>    });
</span><span class='line'>
</span><span class='line'>    function toBar() {
</span><span class='line'>        return $.ajax({
</span><span class='line'>            type: "GET",
</span><span class='line'>            url: $("#base-url").val(),
</span><span class='line'>            data: {
</span><span class='line'>                ajaxRequest: "ajaxRequest"
</span><span class='line'>            },
</span><span class='line'>            complete: function(response) {
</span><span class='line'>                var json = $.parseJSON(response.responseText);
</span><span class='line'>                $("#replace-area").empty();
</span><span class='line'>                if (json.data.content.length &gt; 0) {
</span><span class='line'>                    $("#replace-area").append(json.data.content);
</span><span class='line'>                };
</span><span class='line'>            }
</span><span class='line'>        });
</span><span class='line'>    };
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>最後に<code>AjaxController.php</code>。<code>CController#renderPartial()</code>を利用する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public function actionIndex()
</span><span class='line'>{
</span><span class='line'>    // Ajaxのリクエストを判定。
</span><span class='line'>    if (isset($_GET['ajaxRequest']))
</span><span class='line'>    {
</span><span class='line'>        // 部分テンプレートを文字列として取得。
</span><span class='line'>        // 第3引数をtrueにすることで、文字列として取得できる。
</span><span class='line'>        $content = $this-&gt;renderPartial('part', array(
</span><span class='line'>                'baseUrl' =&gt; Yii::app()-&gt;createUrl('base'),
</span><span class='line'>            ), true);
</span><span class='line'>
</span><span class='line'>        $data = array(
</span><span class='line'>                'content' =&gt; $content,
</span><span class='line'>            );
</span><span class='line'>
</span><span class='line'>        // アウトプットを文字列としてレンダリング。
</span><span class='line'>        // 第4引数をtrueにすることで、文字列としてレンダリングできる。
</span><span class='line'>        $this-&gt;renderPartial('ajax_content',
</span><span class='line'>              CJSON::encode(array('data'=&gt;$data)), false, true);
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Passenger]複数アプリケーションを配置する]]></title>
    <link href="http://ayanami.github.io/blog/passenger/deploy-some-apps-passenger/"/>
    <updated>2014-06-11T01:39:49+09:00</updated>
    <id>http://ayanami.github.io/blog/passenger/deploy-some-apps-passenger</id>
    <content type="html"><![CDATA[<p>hogeアプリとfugaアプリを配置したい場合。
<code>/etc/httpd/conf.d/</code>直下に配置した任意の<code>.conf</code>ファイルを以下の様に記載。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;Location /hoge&gt;
</span><span class='line'>  PassengerAppRoot /opt/hoge
</span><span class='line'>  RailsBaseURI /hoge
</span><span class='line'>&lt;/Location&gt;
</span><span class='line'>&lt;Location /fuga&gt;
</span><span class='line'>  PassengerAppRoot /opt/fuga
</span><span class='line'>  RailsBaseURI /fuga
</span><span class='line'>&lt;/Location&gt;</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[PHP]SmartyでYiiのWidgetを使う]]></title>
    <link href="http://ayanami.github.io/blog/php/yii-widget-by-smarty/"/>
    <updated>2014-06-05T01:12:40+09:00</updated>
    <id>http://ayanami.github.io/blog/php/yii-widget-by-smarty</id>
    <content type="html"><![CDATA[<p><code>Yii</code>フレームワークの<code>Widget</code>を普通に使う場合はこんな感じ。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php $this-&gt;widget('zii.widgets.jui.CJuiDatePicker', array(
</span><span class='line'>    'model'=&gt;$model,
</span><span class='line'>    'attribute'=&gt;'birthday',
</span><span class='line'>    'language'=&gt;'ja',
</span><span class='line'>    'options'=&gt;array(
</span><span class='line'>        'dateFormat'=&gt;'yy-mm-dd',
</span><span class='line'>        'firstDay' =&gt; 1,
</span><span class='line'>        'yearRange'=&gt;'1900:+0',
</span><span class='line'>        'changeYear'=&gt;'true',
</span><span class='line'>        'changeMonth'=&gt;'true'
</span><span class='line'>    ),
</span><span class='line'>)); ?&gt;</span></code></pre></td></tr></table></div></figure>


<p><code>Smarty</code>テンプレートエンジンを使った場合はこんな感じ。
<code>array</code>の書き方と、<code>widget</code>の第3引数の<code>true</code>がポイント。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{$this-&gt;widget('zii.widgets.jui.CJuiDatePicker', [
</span><span class='line'>    'model'=&gt;$model,
</span><span class='line'>    'attribute'=&gt;'birthday',
</span><span class='line'>    'language'=&gt;'ja',
</span><span class='line'>    'options'=&gt;[
</span><span class='line'>        'dateFormat'=&gt;'yy-mm-dd',
</span><span class='line'>        'firstDay' =&gt; 1,
</span><span class='line'>        'yearRange'=&gt;'1900:+0',
</span><span class='line'>        'changeYear'=&gt;'true',
</span><span class='line'>        'changeMonth'=&gt;'true'
</span><span class='line'>    ]
</span><span class='line'>], true)}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Octopress]GitHubでブログを書く]]></title>
    <link href="http://ayanami.github.io/blog/octopress/octopress/"/>
    <updated>2014-06-01T00:48:15+09:00</updated>
    <id>http://ayanami.github.io/blog/octopress/octopress</id>
    <content type="html"><![CDATA[<p>GitHubからcloneしたOctopressのディレクトリ直下で、以下コマンドを実行。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle exec rake new_post['title']</span></code></pre></td></tr></table></div></figure>


<p><code>octopress/source/_post/</code>直下に<code>yyyy-mm-dd-title.markdown</code>が作成される。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>layout: post
</span><span class='line'>title: "title"
</span><span class='line'>date: 2014-06-01 00:48:15 +0900
</span><span class='line'>comments: true
</span><span class='line'>categories: </span></code></pre></td></tr></table></div></figure>


<p><code>markdown</code>で記事を生成し、以下のコマンドを実行。
実行後、<code>http://localhost:4000/</code>にアクセスして、内容を確認する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle exec rake preview</span></code></pre></td></tr></table></div></figure>


<p>内容がOKなら、以下のコマンドを実行。
実行後、<code>http://username.github.io</code>にアクセス。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle exec rake gen_deploy</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Objective-C]UIControlのイベントハンドラに引数を渡す]]></title>
    <link href="http://ayanami.github.io/blog/objective-c/uicontrol-event-callback/"/>
    <updated>2014-04-26T01:40:31+09:00</updated>
    <id>http://ayanami.github.io/blog/objective-c/uicontrol-event-callback</id>
    <content type="html"><![CDATA[<p>Cocoaの<code>[UIControl addTarget:action:forControlEvents:]</code>では<code>action</code>に設定するセレクタに引数を渡すことができないので、
<code>category</code>と<code>blocks</code>を利用して、自由に定義したコールバックを渡せるようにする。</p>

<p>ファイル名は<code>UIControl+Blocks</code>とする。まずはヘッダファイルを定義。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import &lt;UIKit/UIKit.h&gt;
</span><span class='line'>@interface UIControl(Blocks)
</span><span class='line'>- (void)addTargetWithBlocks:(void (^)())blocks forControlEvents:(UIControlEvents)forControlEvents;
</span><span class='line'>@end</span></code></pre></td></tr></table></div></figure>


<p>次に実装ファイルを定義。<code>category</code>内ではインスタンス変数を保持できないので、関連参照を用いて<code>blocks</code>をストアする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import "UIControl+Blocks.h"
</span><span class='line'>#import &lt;objc/runtime.h&gt;
</span><span class='line'>@implementation UIControl(Blocks)
</span><span class='line'>- (void)addTargetWithBlocks:(void (^)())blocks forControlEvents:(UIControlEvents)forControlEvents {
</span><span class='line'>    objc_setAssociatedObject(self, @"key", blocks, OBJC_ASSOCIATION_COPY);
</span><span class='line'>    [self addTarget:self action:@selector(callback:) forControlEvents:forControlEvents];
</span><span class='line'>}
</span><span class='line'>- (void)callback:(id)sender {
</span><span class='line'>    void (^blocks)() = objc_getAssociatedObject(self, @"key");
</span><span class='line'>    if (blocks) {
</span><span class='line'>        blocks();
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>@end</span></code></pre></td></tr></table></div></figure>


<p>後は、任意のクラスでヘッダファイルをインポートすれば、<code>[UIControl addTargetWithBlocks:forControlEvents:]</code>が利用できる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[btn addTargetWithBlocks:^{
</span><span class='line'>    NSLog(@"%@", @"hoge");
</span><span class='line'>} forControlEvents:UIControlEventTouchUpInside];</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Java]リストソート]]></title>
    <link href="http://ayanami.github.io/blog/java/array-sort-java/"/>
    <updated>2014-04-11T20:34:01+09:00</updated>
    <id>http://ayanami.github.io/blog/java/array-sort-java</id>
    <content type="html"><![CDATA[<p><code>list</code>の要素が<code>java.lang.Comparable</code>を実装している場合。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Collections.sort(list);</span></code></pre></td></tr></table></div></figure>


<p><code>list</code>の要素が以下の様なメンバを持つオブジェクトである場合。
面倒なので、getter、setterは省略。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class Hoge {
</span><span class='line'>    private int foo;
</span><span class='line'>    private String bar;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><code>bar</code>の昇順でソート。<code>java.util.Comparator</code>実装クラスが必要になる。
まずは、実装クラスを作って・・・</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class Fuga implements Comparator&lt;Hoge&gt; {
</span><span class='line'>    public int compare(Hoge o1, Hoge o2) {
</span><span class='line'>        return o1.getBar.compareTo(o2.getBar);
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>比較処理を実行。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Collections.sort(list, new Fuga());</span></code></pre></td></tr></table></div></figure>


<p>ちなみに、Objective-Cでは<a href="http://ayanami.github.io/blog/objective-c/array-sort-objc/">こんな感じ</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Objective-C]配列ソート]]></title>
    <link href="http://ayanami.github.io/blog/objective-c/array-sort-objc/"/>
    <updated>2014-04-07T18:57:32+09:00</updated>
    <id>http://ayanami.github.io/blog/objective-c/array-sort-objc</id>
    <content type="html"><![CDATA[<p>要素が<code>NSString</code>である<code>NSArray</code>のソート方法。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[array sortedArrayUsingSelector:@selector(compare:)];</span></code></pre></td></tr></table></div></figure>


<p>要素が以下の様なプロパティを持つオブジェクトである<code>NSArray</code>のソート方法。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@property (nonatomic) NSUInteger hoge;
</span><span class='line'>@property (nonatomic) NSString *fuga;</span></code></pre></td></tr></table></div></figure>


<p><code>fuga</code>の昇順でソート。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSSortDescriptor *desc = [NSSortDescriptor sortDescriptorWithKey:@"fuga" ascending:YES];
</span><span class='line'>[array sortedArrayUsingDescriptors:[NSArray arrayWithObject:desc]];</span></code></pre></td></tr></table></div></figure>


<p>ちなみに、Javaでは<a href="http://ayanami.github.io/blog/java/array-sort-java/">こんな感じ</a>。</p>

<p>Objective-Cの方が楽だなー。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Java]数値判定]]></title>
    <link href="http://ayanami.github.io/blog/java/is-numeric-java/"/>
    <updated>2014-04-04T20:34:07+09:00</updated>
    <id>http://ayanami.github.io/blog/java/is-numeric-java</id>
    <content type="html"><![CDATA[<p>Javaにおける数値判定。
引数が、正規表現<code>"^[0-9]+$"</code>にマッチしているかを判定した結果を返す。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public static boolean isNumeric(String text) {
</span><span class='line'>    Pattern pattern = Pattern.compile("^[0-9]+$");
</span><span class='line'>    return pattern.matcher(text).find();
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>ちなみにObjective-Cでは<a href="http://ayanami.github.io/blog/objective-c/is-numeric-objc/">こんな感じ</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Objective-C]数値判定]]></title>
    <link href="http://ayanami.github.io/blog/objective-c/is-numeric-objc/"/>
    <updated>2014-03-28T20:42:38+09:00</updated>
    <id>http://ayanami.github.io/blog/objective-c/is-numeric-objc</id>
    <content type="html"><![CDATA[<p>Objective-Cでの数値判定方法はいくつかあるみたいだけど、<code>NSCharacterSet</code>を利用した方法が一番しっくりきた。
<code>@"0123456789"</code>が、引数のスーパーセットかを判定した結果を返す。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+ (BOOL)isNumeric:(NSString *)text {
</span><span class='line'>    NSCharacterSet *numbers = [NSCharacterSet characterSetWithCharactersInString:@"0123456789"];
</span><span class='line'>    NSCharacterSet *target = [NSCharacterSet characterSetWithCharactersInString:text];
</span><span class='line'>    return [numbers isSupersetOfSet:target];
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>ちなみに、Javaでは<a href="http://ayanami.github.io/blog/java/is-numeric-java/">こんな感じ</a>。</p>

<p>Objective-Cは好きだけど、Javaと比べるとメソッド名が長い。。。</p>
]]></content>
  </entry>
  
</feed>
